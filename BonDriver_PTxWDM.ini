[SET]
;S側チューナーを開いたときに自動的にLNB電源を供給するかどうか[y/N]
UseLNB=n
;LNB電源に15Vではなく11Vを供給するかどうか[y/N]
LNB11V=n
;IBonDriver3のSetLnbPower()でアプリ側にLNB電源の管理を行わせるかどうか[y/N]
Bon3Lnb=n
;ID指定チューナーを開けなかった場合に空きのチューナーに代替させるかどうか[y/N]
TrySpares=y
;SetChannel()成功の可否をきちんと報告してスキャン速度を上げるかどうか[y/N]
;※Spinelを使用している場合は、この値を n にしないとうまく動作しない模様…
FastScan=y
;SetChannel()が成功した際に、受信済みバッファを破棄するまで待つ時間（ms）
SetChDelay=0
;PTxWDMCtrl.exeとバッファ通信する時のパケット数
;（通信に使用するバッファサイズ ＝ [AsyncTS]PacketSize × パケット数）
;※e.g. 2=ダブルバッファリング 3=トリプルバッファリング
CtrlPackets=2

;チューニングウェイト
MAXDUR_FREQ=1000 ; 周波数調整に費やす最大時間(ms)
MAXDUR_TMCC=1500 ; TMCC取得に費やす最大時間(ms)
MAXDUR_TSID=3000 ; TSID設定に費やす最大時間(ms)


;既定のチャンネル情報
[DefSpace]
;既定のチャンネル情報にUHFを含めるかどうか[Y/n]
UHF=y
;既定のチャンネル情報にCATVを含めるかどうか[y/N]
CATV=n
;既定のチャンネル情報にBSを含めるかどうか[Y/n]
BS=y
;既定のBSチャンネルの各ストリーム数[0-8]
BSStreams=4
;既定のBSチャンネル配置をストリーム基準とするかどうか[y/N] ※１
BSStreamStride=n
;既定のチャンネル情報にCS110を含めるかどうか[Y/n]
CS110=y
;既定のCS110チャンネルの各ストリーム数[0-8]
CS110Streams=0
;既定のCS110チャンネル配置をストリーム基準とするかどうか[y/N] ※１
CS110StreamStride=n
;※既定のチャンネル情報は、チャンネルファイル .ch.txt が定義されていると
;そのチャンネルファイルの方が優先され、既定のチャンネル情報は破棄される

; ※１: BSStreamStride / CS110StreamStride （ストリーム基準の配置）について
;
; チャンネルの並びをストリーム基準の配置に並べ替えるとBSStreams/CS110Streamsの
; 値を増減させてもアプリ側でスキャンしたチャンネルの連番を維持することが可能
;
; <ＢＳストリーム基準の配置変更例>
;
;  BSStreamStride=0 のチャンネル配置順 （トランスポンダ基準の配置）
;     BSStreams=4 のとき
;       [始] BS01/TS0 → BS01/TS1 → BS01/TS2 → BS01/TS3 → BS03/TS0 …
;     BSStreams=3 のとき                         ↓↑↓↑狂う↓↑↓↑
;       [始] BS01/TS0 → BS01/TS1 → BS01/TS2 → BS03/TS0 → BS03/TS1 …
;    (BSStreamsの値を変更するとスキャンしたチャンネルの連番が狂ってしまう)
;
;  BSStreamStride=1 のチャンネル配置順 （ストリーム基準の配置）
;     BSStreams=4 のとき
;       [始] BS01/TS0 → BS03/TS0 → BS05/TS0 → BS07/TS0 … BS23/TS0 →
;         → BS01/TS1 → BS03/TS1 → BS05/TS1 → BS07/TS1 … BS23/TS1 →
;         → BS01/TS2 → BS03/TS2 → BS05/TS2 → BS07/TS2 … BS23/TS2 →
;         → BS01/TS3 → BS03/TS3 → BS05/TS3 → BS07/TS3 … BS23/TS3 [終]
;     BSStreams=3 のとき
;       [始] BS01/TS0 → BS03/TS0 → BS05/TS0 → BS07/TS0 … BS23/TS0 →
;         → BS01/TS1 → BS03/TS1 → BS05/TS1 → BS07/TS1 … BS23/TS1 →
;         → BS01/TS2 → BS03/TS2 → BS05/TS2 → BS07/TS2 … BS23/TS2 [終]
;       [ → BS01/TS3 → BS03/TS3 … ] ←この並びが消えるだけ
;    (BSStreamsの値を変更してもスキャンしたチャンネルの連番は狂わない)
;

; 使用しないチューナー空間の羅列を InvisibleSpaces に記述すると
; そのチューナー空間とチャンネル情報は、消去される
;InvisibleSpaces=VHF,UHF

; 使用しないチューナー空間の羅列を InvalidSpaces に記述すると
; そのチューナー空間のチャンネル情報は、空になる（チューナー空間は消去しない）
;InvalidSpaces=VHF,CATV

; チューナー空間の羅列を SpaceArrangement に記述するとその記述された
; 順番通りにチューナー空間を並べ替えて表示することが可能となる
;（記述のないチューナー空間は自動的に最後尾に追記される）
;SpaceArrangement=UHF,BS,CS110


;非同期TSストリームのバッファリング設定
[AsyncTS]
;非同期TSストリームのバッファリング設定項目::
;  一回に送受信する容量： PacketSize (バイト）
;  初期バッファ容量： PacketSize × QueueNum (バイト）
;  最大バッファ容量： PacketSize × QueueMax (バイト）
;  バッファ充填のボーダー： PacketSize × EmptyBorder (バイト）
;   (※この値よりバッファの空きキューが少なくなると自動で充填を開始する)
;  オーバーラップ保障容量： PacketSize × EmptyLimit (バイト）
;   (※この値よりバッファの空きキューが少なくなるとアプリケーションが現在その
;      空領域のデータを読み取り進行中だとPTxWDMが判断し、データの上書きが行われ
;      ないように細工してその読み取り中のデータを保障する)
;  バッファ監視間隔： RecvThreadWait (ミリ秒単位)
;   (※この値を大きくすると負荷が少なくなるものの、チャンネル切替や終了時に
;      時間を取られることがある弊害を伴う。
;      また、逆に値が小さ過ぎるとPTxWDMCtrl.exeとの応答不良によるドロップが
;      発生する弊害を伴う。)
;(以下はすべてデフォルトの値)
;PacketSize=47K ; 47KiB
;QueueNum=66
;QueueMax=660
;EmptyBorder=22
;EmptyLimit=11
;RecvThreadWait=250

;RecvThreadPriority
; 非同期TSストリームスレッドの優先順位
; (Default: THREAD_PRIORITY_HIGHEST)
;RecvThreadPriority=THREAD_PRIORITY_TIME_CRITICAL  ; リアルタイム
;RecvThreadPriority=THREAD_PRIORITY_HIGHEST        ; 高い
;RecvThreadPriority=THREAD_PRIORITY_ABOVE_NORMAL   ;  ↑
;RecvThreadPriority=THREAD_PRIORITY_NORMAL         ; 通常
;RecvThreadPriority=THREAD_PRIORITY_BELOW_NORMAL   ;  ↓
;RecvThreadPriority=THREAD_PRIORITY_LOWEST         ; 低い
;RecvThreadPriority=THREAD_PRIORITY_IDLE           ; アイドル時のみ

;FifoThreadPriority
; 非同期TSバッファリングFIFOアロケーションスレッドの優先順位
; (Default: THREAD_PRIORITY_HIGHEST)
;FifoThreadPriority=THREAD_PRIORITY_TIME_CRITICAL  ; リアルタイム
;FifoThreadPriority=THREAD_PRIORITY_HIGHEST        ; 高い
;FifoThreadPriority=THREAD_PRIORITY_ABOVE_NORMAL   ;  ↑
;FifoThreadPriority=THREAD_PRIORITY_NORMAL         ; 通常
;FifoThreadPriority=THREAD_PRIORITY_BELOW_NORMAL   ;  ↓
;FifoThreadPriority=THREAD_PRIORITY_LOWEST         ; 低い
;FifoThreadPriority=THREAD_PRIORITY_IDLE           ; アイドル時のみ

